
https://www.rithmschool.com/courses/flask-fundamentals/crud-with-flask

Objectives: By the end of this chapter, you should be able to:
    Explain what REST is and describe RESTful routing
    Include flask modus for overriding the default HTTP method
    Build a CRUD app in Flask
    Include a stylesheet in a Flask application
Now that we have a solid understanding of the basics of Flasks, it's time to
build some more powerful web applications. Before we do so, let's quickly
review some key concepts relating to the internet.

Key Definitions
HTTP - The protocol that clients and servers use to communicate.
Idempotent - An operation is idempotent if calling it multiple times yields
the same result. For example, GET requests should be idempotent.
CRUD - Shorthand for Create, Read, Update, and Delete. We often talk about
implementing CRUD on a resource when building web applications.
Resource - A noun that we operate on. An application can have many resources,
but each resource will have its own set of routes and CRUD operations.
For example, users and tweets are two examples of resources for Twitter.

Review HTTP Verbs (CRUD)
(Create)PUT - for updating an entire resource
(Read  )GET - for retrieving information or sending information via the query string
(Update)POST - for sending information via the body of the request
        PATCH - for updating a part of a resource
(Delete)DELETE - for removing a resource

GET vs POST
    GET is usually faster
    POST is always more secure is information is not transmitted in the
    query string (the URL bar in the browser can be seen by anyone)
    GET is idempotent; POST is not.

REST
As applications grow larger and more developers work on them, structuring and
naming things like routes becomes something that needs to be standardized.
While REST is much more than route standardization (it is a standard for
building web applications), one of the ideas is centering applications around
resources and naming the routes for those resources appropriately
(we call that RESTful routing).

Let's imagine that we have a web app with a resource of students (resources
are ALWAYS in the plural). Here are what the HTTP Verb, RESTful routes and
action look like.

GET '/students' -> render a page called 'index.html' (typically with information on all students)
GET '/students/new' -> render a page called 'new.html' (typically with a form to create a new student)
GET '/students/:id' -> render a page called 'show.html' (typically with information on the student with the given id)
GET '/students/:id/edit' -> render a page called 'edit.html' (typically with a form to edit the student with the given id)
POST '/students' -> create a new resource, then redirect.
PATCH '/students/:id' -> find a resource by the id, update it, then redirect.
DELETE '/students/:id' -> find a resource by the id, remove it, then redirect.

The filenames index, new, show and edit are NOT required, but are convention
when working with RESTful routing and are highly encouraged (especially by
larger frameworks like Ruby on Rails).

Getting started
Let's build our first CRUD app with Flask! To get started we first need
a resource: let's use toys. Since we will be creating toys, we'll start
by making a file called toy.py which will store a simple toy class.
In order to make sure that we can uniquely identify each toy, we will add
a property called id that increments by one anytime a toy is created

class Toy():
    count = 1
    def __init__(self,name):
        self.name = name
        self.id = Toy.count
        Toy.count += 1

Now let's create an app.py file to start our server with some sample data.
When the user visits the route /toys, let's start by creating an index route
where we will return a template that shows all of our toys.

from flask import Flask, render_template
from toy import Toy
app = Flask(__name__)
duplo = Toy(name='duplo')
lego = Toy(name='lego')
knex = Toy(name='knex')
toys = [duplo,lego,knex]
@app.route('/toys')
def index():
    return render_template('index.html', toys=toys)

Now let's start the server using flask run and head over to localhost:5000/toys. We should see all of our toys here!
flask run
localhost:5000/toys

New

< @app.route('/toys/new')
< def new():
<     return render_template('new.html')

Now let's create our new.html file with a form. This form should have one input
for the name of the new toy we are making. In order to send data to our server,
we have to add a name attribute in our form. This is how we will access the
value of whatever the user types in for the name of the toy. When the form is
submitted, we will reuse our index function but with a different HTTP verb:
this time, we'll use a POST request.


So we have a form, but if you try to create a new toy with this form, you should see a Method Not Allowed error in the browser. This is because we haven't set up our /toys route to accept POST requests! And even if it could, we haven't told it how to handle such requests by updating the list of toys. Let's make those modifications next:

Create
Before we discuss what the modified route will look like, we should think about what we want to happen when we submit the form. Once we have finished creating a Toy, it would be a bit silly to render another HTML page telling us that we just created a toy. Instead, it would make more sense to go back to the index page and see an updated list of all the toys. So, how can we make another request to send us the index page? To do that we have to introduce a concept called "redirecting."

Redirect
A redirect is actually two separate requests:

First, the server sends a response with a header called 'location' with a value that is a route
The browser recieves the response and immidiately issues a new request to the route provided in the location header
If the route exists on the server, the server responds accordingly (or returns a 404 status code (page not found)).
To do this with Flask, we need to import redirect. We will also import url_for so that we do not have to "hard code" our routes, as well as request which we will use to collect data from a form.

Notice that we had to specify in our @app.route for toys that our application should accept both GET and POST. Then, inside of index, we can handle each case separately.

Try it out - you should now be able to add new toys inside of your application!


Show
Now that we are able to create new toys, let's make a route to show some additional information about the toys. In order for this to work, we are going to need a way to find individual toys by their id. Let's make a route that includes a dynamic parameter called id which is an integer. Let's call the function that this route triggers show.



